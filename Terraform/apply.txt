ubuntu@ip-172-31-29-238:~/workarea/devopshift/FinalExam/Terraform$ terraform apply -var="my_ip_cidr=35.86.136.73/32"
tls_private_key.ssh_key: Refreshing state... [id=4deb36877c061e57848b296c9fad1fda327acfea]
local_file.private_key: Refreshing state... [id=fef8a17ce2ded942b79ead9cab03fe0faa6186c9]
data.aws_subnets.public_subnets: Reading...
data.aws_ami.amazon_linux: Reading...
aws_key_pair.builder_key: Refreshing state... [id=builder-key-rotem-meron]
data.aws_subnets.public_subnets: Read complete after 0s [id=us-east-1]
data.aws_ami.amazon_linux: Read complete after 0s [id=ami-0871b7e0b83ae16c4]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.builder will be created
  + resource "aws_instance" "builder" {
      + ami                                  = "ami-0871b7e0b83ae16c4"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.medium"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "builder-key-rotem-meron"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + region                               = "us-east-1"
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = "subnet-0fb155b4776b96c85"
      + tags                                 = {
          + "Name" = "builder"
        }
      + tags_all                             = {
          + "Name" = "builder"
        }
      + tenancy                              = (known after apply)
      + user_data                            = <<-EOT
            #!/bin/bash
            yum update -y
            
            # Install Docker
            amazon-linux-extras install docker -y
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ec2-user
            
            # Install Docker Compose
            curl -L "https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
        EOT
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_security_group.builder_sg will be created
  + resource "aws_security_group" "builder_sg" {
      + arn                    = (known after apply)
      + description            = "Allow SSH and HTTP for app"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "35.86.136.73/32",
                ]
              + description      = "HTTP App"
              + from_port        = 5001
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 5001
            },
          + {
              + cidr_blocks      = [
                  + "35.86.136.73/32",
                ]
              + description      = "SSH"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "builder-sg-rotem-meron"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-044604d0bfb707142"
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + public_dns           = (known after apply)
  + public_ip            = (known after apply)
  + security_group_id    = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_security_group.builder_sg: Creating...
aws_security_group.builder_sg: Creation complete after 3s [id=sg-097e7c3b3b2cecfb8]
aws_instance.builder: Creating...
aws_instance.builder: Still creating... [00m10s elapsed]
aws_instance.builder: Creation complete after 13s [id=i-01824cf8502e5f4e0]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

public_dns = "ec2-13-222-28-69.compute-1.amazonaws.com"
public_ip = "13.222.28.69"
security_group_id = "sg-097e7c3b3b2cecfb8"
ssh_key_name = "builder-key-rotem-meron"
ssh_private_key_path = <sensitive>
ubuntu@ip-172-31-29-238:~/workarea/devopshift/FinalExam/Terraform$ 